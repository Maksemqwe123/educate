import sys
import pygame as pg
import random

pg.init()

FPS = 120
window_width = 600
window_height = 400

white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
yellow = (255, 255, 0)
background = (192, 192, 192)

r = 25

width_rect = 100
height_rect = 10
x_ball, y_ball = 100, 200
direct_x_ball, direct_y_ball = 1, 1

x_rect = (window_width // 2 - width_rect // 2)
y_rect = window_height - height_rect
direct_x_rect = 1

screen = pg.display.set_mode((window_width, window_height))

clock = pg.time.Clock()

score_count = 0

run = True

while run:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            print("закрыли приложение")
            sys.exit()
        elif event.type == pg.MOUSEMOTION:
            position = event.pos
            x_rect = position[0] - (width_rect // 2)

    """Анимация"""
    clock.tick(FPS)
    screen.fill(background)
    pg.event.pump()

    ball = pg.draw.circle(screen, red, (x_ball, y_ball), r)
    pg.draw.rect(screen, black,
                 (x_rect, y_rect, width_rect, height_rect)
                 )

    """Перемещение"""
    if pg.key.get_pressed()[pg.K_LEFT]:
        x_rect -= direct_x_rect

    if pg.key.get_pressed()[pg.K_RIGHT]:
        x_rect += direct_x_rect

    x_ball += direct_x_ball
    if x_ball >= window_width - r or x_ball <= 0 + r:
        direct_x_ball = -direct_x_ball

    y_ball += direct_y_ball
    if y_ball <= 0 + r:
        direct_y_ball = -direct_y_ball

    if x_ball in range(x_rect, x_rect + width_rect) and y_ball + r in range(y_rect, y_rect + height_rect):
        direct_y_ball = -direct_y_ball
        score_count += 1
        FPS += 10
        print(score_count)

    if y_ball - r >= window_height:
        font_ = pg.font.SysFont("tahoma", 32)
        text = font_.render(f'Ваш счёт: {score_count}', True, red )
        screen.blit(text, (200, 175))
        for event in pg.event.get():
            if event.type == pg.QUIT:
                sys.exit()
            elif event.type == pg.KEYDOWN:
                if event.key == pg.K_KP_ENTER:
                    x_ball, y_ball = 100, 50
                    score_count = 0


    pg.display.update()











import sys
import pygame as pg


pg.init()  # Инициализация

pg.display.set_caption('Ping pong')  # Создание название приложения (в шапке)
img = pg.image.load('andr.png')  # Получение изображения и присваивание его переменной
pg.display.set_icon(img)  # Отрисовка иконки приложения

FPS = 120  # Кол-во кадров в сек
window_width = 600  # Ширина экрана
window_height = 400  # Высота экрана

width_rect_1 = 10  # Ширина платформы 1
height_rect_1 = 100  # Ширина платформы 1

width_rect_2 = 10  # Ширина платформы 2
height_rect_2 = 100  # Ширина платформы 2

blue = (12, 56, 84)  # Создаём цвет фона RGB-раскладкой
white = (255, 255, 255)  # Создаём цвет фона RGB-раскладкой
black = (0, 0, 0)

r = 15  # Радиус шарика
x, y = 100, 300  # Положение шарика
direct_x, direct_y = 1, 1  # Перемещение шарика по осям

x_rect_1 = (window_width - width_rect_1)  # Положение по Ох платформы 1
y_rect_1 = window_height // 2 - height_rect_1 // 2  # Положение по Оу платформы 1
direct_y_rect_1 = 3  # Перемещение платформы по Оу

x_rect_2 = 0  # Положение по Ох платформы 1
y_rect_2 = window_height // 2 - height_rect_1 // 2  # Положение по Оу платформы 1
direct_y_rect_2 = 3  # Перемещение платформы по Оу

screen = pg.display.set_mode((window_width, window_height))  # Создание переменной отрисовки экрана
clock = pg.time.Clock()  # Создание переменной времени

bg = pg.image.load('bg.png').convert()  # Создание фона картинке 

count_user_1 = 0  # Счёт игроков
count_user_2 = 0  # Счёт игроков

while True:  # Цикл событий
    for event in pg.event.get():  # Цикл, отслеживающий событий
        if event.type == pg.QUIT:  # Отслеживание закрытие окна приложения
            sys.exit()  # Прерывание выполнения скрипта

    clock.tick(FPS)  # Инициализация чистоты кадров/сек
    pg.event.pump()  # Функция, позволяющая реагировать на зажатие клавиш

    screen.blit(bg, (0, 0))
    # screen.fill(blue)  # Отрисовка фона

    pg.draw.line(screen, white, (window_width // 2,  0), (window_width // 2, window_height), 8)  # Отрисовка линии сетки
    pg.draw.line(screen, white, (0, window_height // 2), (window_width, window_height // 2), 4)  # Отрисовка линии сетки

    fout_ = pg.font.SysFont('tahona', 32)  # Создание шрифта
    text = fout_.render(f'{count_user_2} : {count_user_1}', True, (255, 0, 0))  # Создание текста счёта
    screen.blit(text, (window_width // 2 - 21, 0))  # Отрисовка счёта

    ball_1 = pg.draw.circle(screen, white, (x, y), r)  #Отрисовка шарика

    pg.draw.rect(screen, black,  # Отрисовка платформы 1
                 (x_rect_1, y_rect_1, width_rect_1, height_rect_1)
                 )

    pg.draw.rect(screen, black,  # Отрисовка платформы 2
                 (x_rect_2, y_rect_2, width_rect_2, height_rect_2)
                 )

    if pg.key.get_pressed()[pg.K_DOWN]:  # Обработка перемещения плотформы 1 вниз
        if y_rect_1 + height_rect_1 >= window_height:  # Проверка выхода за пределы экрана
            y_rect_1 = window_height - height_rect_1  # Изменение по осям
        y_rect_1 += direct_y_rect_1

    if pg.key.get_pressed()[pg.K_UP]:  # Обработка перемещения плотформы 1 вниз
        if y_rect_1 <= 0:  # Проверка выхода за пределы экрана
            y_rect_1 = 0  # Изменение по осям
        y_rect_1 -= direct_y_rect_1

    if pg.key.get_pressed()[pg.K_s]:  # Обработка перемещения плотформы 2 вниз
        if y_rect_2 + height_rect_2 >= window_height:  # Проверка выхода за пределы экрана
            y_rect_2 = window_height - height_rect_2  # Изменение по осям
        y_rect_2 += direct_y_rect_2

    if pg.key.get_pressed()[pg.K_w]:  # Обработка перемещения плотформы 2 вниз
        if y_rect_2 <= 0:  # Проверка выхода за пределы экрана
            y_rect_2 = 0  # Изменение по осям
        y_rect_2 -= direct_y_rect_2

    x += direct_x  # Перемещение шарика
    y += direct_y

    if y < 0 + r or y + r >= window_height:  # Отталкивание шарика от краев экрана
        direct_y = - direct_y

    if x - r >= window_width:  # Проверка вылета шарика за половину 1 игрока
        count_user_2 += 1  # Увеличение счёта второго игрока
        x, y = window_width // 2, window_height // 2  # Задаем новое положение игрока
        FPS = 120  # Возврат FPS в исходное состояние

    if x <= 0:  # Проверка вылета шарика за половину 2 игрока
        count_user_1 += 1  # Увеличение счёта первого игрока
        x, y = window_width // 2, window_height // 2  # Задаем новое положение игрока
        FPS = 120  # Возврат FPS в исходное состояние

    if x - r in range(x_rect_2, x_rect_2 + width_rect_2) and y - r in range(y_rect_2, y_rect_2 + height_rect_2):  # Отталкивание от 2 платформы
        direct_x = - direct_x  # Измение направления движения шарика
        FPS += 10  # Увеличение скорости движение шарика

    if x - r in range(x_rect_1, x_rect_1 + width_rect_1) and y - r in range(y_rect_1, y_rect_1 + height_rect_1):  # Отталкивание от 1 платформы
        direct_x = - direct_x  # Измение направления движения шарика
        FPS += 10  # Увеличение скорости движение шарика

    pg.display.update()  #Обновление экрана
